//
//  ViEvent.h
//  Vinter
//
//  Copyright 2011 by Nils Daumann and Sidney Just. All rights reserved.
//  Unauthorized use is punishable by torture, mutilation, and vivisection.
//

#include <string>
#import "ViBase.h"
#import "ViVector2.h"
#import "ViKernel.h"
#import "ViScene.h"
#import "ViAnimationStack.h"

namespace vi
{
    namespace event
    {
        typedef enum
        {
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
            /**
             * The event is a mouse event. Mac OS X only
             **/
            eventTypeMouse = 1,
            /**
             * The event is a keyboard event. Mac OS X only
             **/
            eventTypeKeyboard = 2,
#endif
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
            /**
             * The event is a touch event. iOS only
             **/
            eventTypeTouch = 1,
#endif
            /**
             * The event is generated by the engine.
             **/
            eventTypeRenderer = 4,
#ifdef ViPhysicsChipmunk
            eventTypePhysic = 8,
#endif
            eventTypeAnimation = 16,
            eventTypeCustom = 64
        } eventType;
        
        
        class event
        {
        public:
            event(eventType type);
            virtual ~event();
            
            void raise();
            
            
            double timestamp;
            eventType type;
            
        private:
            void *__lastListener;
        };
        
        
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
        typedef enum
        {
            mouseEventTypeUp,
            mouseEventTypeDown,
            mouseEventTypeDragged
        } mouseEventType;
        
        class mouseEvent : public event
        {
        public:
            mouseEvent(NSEvent *otherEvent, mouseEventType subtype);
            mouseEventType subtype;

            uint32_t buttonNumber;
            uint32_t clickCount;
           
            vi::common::vector2 mousePosition;
            
            NSWindow *window;
            NSEvent *wrappedEvent;
        };
        
        
        typedef enum
        {
            keyboardEventTypeUp,
            keyboardEventTypeDown
        } keyboardEventType;
        
        class keyboardEvent : public event
        {
        public:
            keyboardEvent(NSEvent *otherEvent, keyboardEventType subtype);
            keyboardEventType subtype;
            
            bool isRepeat;
            uint16_t keyCode;
            std::string characters;
            
            NSEvent *wrappedEvent;
        };
#endif
        
        
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
        typedef enum
        {
            touchEventTypeBegan,
            touchEventTypeMoved,
            touchEventTypeEnded,
            touchEventTypeCancelled
        } touchEventType;
        
        class touchEvent : public event
        {
        public:
            touchEvent(touchEventType subtype, UIEvent *otherEvent, UIView *view);
            touchEventType subtype;
            
            uint32_t touchCount;
            UIEvent *wrappedEvent;
            UIView  *view;
            NSSet   *touches;
        };
#endif
        
        typedef enum
        {
            renderEventTypeWillBeginRendering,
            renderEventTypeDidFinishRendering,
            renderEventTypeWillDrawScene,
            renderEventTypeDidDrawScene
        } renderEventType;
        
        class renderEvent : public event
        {
        public:
            renderEvent(renderEventType subtype, vi::scene::scene *scene=NULL, vi::common::kernel *kernel=NULL);
            renderEventType subtype;
            
            double timestep;
            
            vi::scene::scene *scene;
            vi::common::kernel *kernel;
        };
        
        
        typedef enum
        {
            animationEventTypeWillBegin,
            animationEventTypeDidBegin,
            animationEventTypeWillRepeat,
            animationEventTypeDidEnd
        } animationEventType;
        
        class animationEvent : public event
        {
        public:
            animationEvent(animationEventType subtype, vi::animation::animationStack *stack);
            animationEventType subtype;
            
            vi::animation::animationStack *stack;
        };
        
        
#ifdef ViPhysicsChipmunk
        typedef enum
        {
            physicEventTypeCollisionBegan,
            physicEventTypeCollisionWillSolve,
            physicEventTypeCollisionDidSolve,
            physicEventTypeCollisionSeperate
        } physicEventType;
        
        class physicEvent : public event
        {
        public:
            physicEvent(physicEventType subtype, vi::scene::scene *scene, cpArbiter *arbiter);
            physicEventType subtype;
            
            int returnValue;
            vi::scene::scene *scene;
            
            vi::scene::sceneNode *nodeA;
            vi::scene::sceneNode *nodeB;
            
            cpArbiter *arbiter;
        };
#endif
    }
}
