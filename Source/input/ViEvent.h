//
//  ViEvent.h
//  Vinter
//
//  Copyright 2011 by Nils Daumann and Sidney Just. All rights reserved.
//  Unauthorized use is punishable by torture, mutilation, and vivisection.
//

#include <string>
#import <Foundation/Foundation.h>
#import "ViVector2.h"

#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#import <UIKit/UIKit.h>
#endif

namespace vi
{
    namespace common
    {
        class kernel;
    }
    
    namespace input
    {
        /**
         * Event types
         **/
        typedef enum
        {
            // Generic types
            /**
             * The event is a mouse event. Mac OS X only
             **/
            eventTypeMouse = 1,
            /**
             * The event is touch event. iOS only
             **/
            eventTypeTouch = 2,
            /**
             * The event is a keyboard event. Mac OS X only
             **/
            eventTypeKeyboard = 4,
            /**
             * The event is generated by the engine itself.
             **/
            eventTypeRender = 8,
            
            /**
             * One of the mouse buttons was clicked down. Always in combination with eventTypeMouse
             **/
            eventTypeMouseDown = 32,
            /**
             * The mouse was moved while one of the mouse buttons was held down. Always in combination with eventTypeMouse
             **/
            eventTypeMouseDragged = 64,
            /**
             * One of the mouse buttons was released. Always in combination with eventTypeMouse
             **/
            eventTypeMouseUp = 128,
            
            
            /**
             * One of the keys on the keyboard was pressed down. Always in combination with eventTypeKeyboard.
             **/
            eventTypeKeyDown = 512,
            /**
             * One of the keys on the keyboard was released. Always in combination with eventTypeKeyboard.
             **/
            eventTypeKeyUp = 1024,
            
            
            /**
             * One or more fingers was pressed onto the devices screen. Always in combination with eventTypeTouch.
             **/
            eventTypeTouchDown = 2048,
            /**
             * One or more fingers was moved while pressed onto the devices screen. Always in combination with eventTypeTouch.
             **/
            eventTypeTouchMoved = 4096,
            /**
             * One or more fingers was released from the screen. Always in combination with eventTypeTouch.
             **/
            eventTypeTouchUp = 8192,
            /**
             * The touch sequence was cancelled by the OS. Always in combination with eventTypeTouch.
             **/
            eventTypeTouchCancelled = 16384,
            
            
            /**
             * The engine will begin drawing a new frame. Always in combination with eventTypeRender.
             **/
            eventTypeRenderWillDraw = 32768,
            /**
             * The engine did finish drawing a frame. Always in combination with eventTypeRender.
             **/
            eventTypeRenderDidDraw = 65536
        } eventType;
        
        
        /**
         * @brief A class signaling any kind of event that happened or is about to happen.
         *
         * A event encapsulates various kind of inputs and other events such as keyboard, mouse or rendering events. Events are posted
         * on creation and then broadcasted to all vi::input::responder that listen to events allowing you to take action if needed.
         **/
        class event
        {
        public:
            event(vi::common::kernel *kern, uint32_t etype);
            
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
            event(NSEvent *otherEvent, uint32_t etype);
            
            /**
             * The window which generated the event. Set if the event type is eventTypeMouse, eventTypeTouch or eventTypeKeyboard.
             **/
            NSWindow *window;
#endif
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
            event(UIEvent *otherEvent, uint32_t etype, UIView *view);
            ~event();
            
            /**
             * The window which generated the event. Set if the event type is eventTypeMouse, eventTypeTouch or eventTypeKeyboard.
             **/
            UIWindow *window;
            /**
             * The view that is associated with the event. Set if the event type is eventTypeTouch
             **/
            UIView *view;
#endif
            
            /**
             * OR bitfield marking the type of the event. Always set.
             **/
            eventType type;
            /**
             * The timestamp of the event. Always set.
             **/
            double timestamp;
            
            // Mouse
            /**
             * The pressed button number. Set if the event is of type eventTypeMouse.
             **/
            uint32_t buttonNumber;
            /**
             * The click count. Set if the event is of type eventTypeMouse.
             **/
            uint32_t clickCount;
            /**
             * The mouse position in Vinters coordinate space. Set if the event is of type eventTypeMouse.
             **/
            vi::common::vector2 mousePosition;
            
            // Keyboard
            /**
             * True if the event was generated because the key was held down. Set if the event is of type eventTypeKeyboard.
             **/
            bool isRepeat;
            /**
             * The device independent key code of the pressed key. Set if the event is of type eventTypeKeyboard.
             **/
            uint16_t keyCode;
            /**
             * The pressed character(s). Set if the event is of type eventTypeKeyboard.
             **/
            std::string characters;
            
            // Touch
            /**
             * Set containing all touches. Set if the event is of type eventTypeTouch.
             **/
            NSSet *touches;
            /**
             * The number of touches on the screen. Set if the event is of type eventTypeTouch.
             **/
            uint32_t touchCount;
            
            // Rendering
            /**
             * The current delta time of the kernel. Set if the event is of type eventTypeRender.
             **/
            double timestep;
            /**
             * The kernel that posted the render event. Set if the event is of type eventTypeRender.
             **/
            vi::common::kernel *kernel;
            
            // Misc
            /**
             * Returns true if the given key is pressed, otherwise false. Returns always false on iOS.
             **/
            static bool isKeyPressed(uint16_t keyCode);
            
        private:
            void post();
        };
    }
}
